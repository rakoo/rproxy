<!doctype html>
<!--[if lt IE 7]> <html class="no-js ie6 oldie" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js ie7 oldie" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js ie8 oldie" lang="en"> <![endif]-->
<!--[if gt IE 8]><!--> <html class=no-js lang=en> <!--<![endif]-->
<head>
<meta charset=utf-8 />
<meta http-equiv=X-UA-Compatible content="IE=edge,chrome=1"/>
<title>Optimizing NGINX TLS Time To First Byte (TTTFB) - igvita.com</title>
<script type='text/javascript'>window.mod_pagespeed_start = Number(new Date());</script><link rel=stylesheet href="//fonts.googleapis.com/css?family=Open+Sans:400,700"/>
<link rel=stylesheet href="http://1-ps.googleusercontent.com/h/www.igvita.com/css/A.style.css+monokai.css,Mcc.fSCfJd9AMn.css.pagespeed.cf.5L-QJoOkqp.css"/>
<meta name=author content="Ilya Grigorik"/>
<meta name=description content="TLS is not slow, it's unoptimized. A hands-on tour of optimizing nginx to deliver one-RTT Time To First Byte (TTFB) with TLS."/>
<meta name=twitter:description content="TLS is not slow, it's unoptimized. A hands-on tour of optimizing nginx to deliver one-RTT Time To First Byte (TTFB) with TLS.">
<meta property=og:image content="http://www.igvita.com/posts/13/nginx-tttfb.png"/>
<meta name=twitter:creator content="@igrigorik">
<meta name=twitter:site content=igrigorik>
<meta name=twitter:url content="http://www.igvita.com/2013/12/16/optimizing-nginx-tls-time-to-first-byte/">
<meta name=twitter:title content="Optimizing NGINX TLS Time To First Byte (TTTFB)">
<meta property=twitter:account_id content=9980812 />
<meta name=viewport content="width=device-width,initial-scale=1,maximum-scale=1"/>
<link rel=alternate type="application/rss+xml" title="igvita.com RSS Feed" href="http://www.igvita.com/feed/"/>
<link rel=canonical href="http://www.igvita.com/2013/12/16/optimizing-nginx-tls-time-to-first-byte/"/>
</head>
<body>
<div id=container>
<header>
<div class=content>
<a href="/">igvita.com</a> <b>&nbsp;|&nbsp;</b> <span>a goal is a dream with a deadline</span>
<a href="/" class=about>about</a>
</div>
</header>
<div id=main role=main>
<div id=post class=content itemscope itemtype="http://schema.org/Article">
<h1 itemprop=name>Optimizing NGINX TLS Time To First Byte (TTTFB)</h1>
<p class=byline>By <a href="/" rel=author itemprop=author>Ilya Grigorik</a> on <b itemprop=datePublished datetime=2013-12-16>December 16, 2013</b></p>
<p><img src='http://1-ps.googleusercontent.com/h/www.igvita.com/posts/13/xnginx-tttfb.png.pagespeed.ic.drIMg2WQkZ.jpg' class=left width=124 height=104 />Network latency is one of our <a href="http://www.igvita.com/2012/07/19/latency-the-new-web-performance-bottleneck/">primary performance bottlenecks</a> on the web. In the worst case, new navigation requires a DNS lookup, TCP handshake, two roundtrips to negotiate the TLS tunnel, and finally a minimum of another roundtrip for the actual HTTP request and response &mdash; that's five network roundtrips to get the first few bytes of the HTML document!</p>
<p>Modern browsers <a href="http://www.igvita.com/posa/high-performance-networking-in-google-chrome/">try very hard</a> to anticipate and predict user activity to hide some of this latency, but speculative optimization is not a panacea: sometimes the browser doesn't have enough information, at other times it might guess wrong. This is why <strong>optimizing Time To First Byte (TTFB), and TLS TTFB in particular due to the extra roundtrips, is critical for delivering a consistent and optimized web experience.</strong></p>
<h2>The why and the how of TTFB</h2>
<p>According to the HTTP Archive, the size of the HTML document at 75th percentile is <a href="http://bigqueri.es/t/what-is-the-distribution-of-html-document-sizes-mobile-vs-desktop/156">~20KB+</a>, which means that a new TCP connection will incur multiple roundtrips (<a href="http://chimera.labs.oreilly.com/books/1230000000545/ch02.html#SLOW_START">due to slow-start</a>) to download this file - with IW4, a 20KB file will take 3 extra roundtrips, and <a href="http://chimera.labs.oreilly.com/books/1230000000545/ch02.html#_tuning_server_configuration">upgrading to IW10</a> will reduce that to 2 extra roundtrips.</p>
<p>To minimize the impact of the extra roundtrips all <strong>modern browsers tokenize and parse received HTML incrementally</strong> and without waiting for the full file to arrive. Stream processing enables the browser to discover other critical resources, such as references to CSS stylesheets, JavaScript, and other assets as quickly as possible and initiate those requests while waiting for the remainder of the document. As a result, optimizing your TTFB and the content of those first bytes can make a big difference to performance of your application:</p>
<ul>
<li><strong>Don't buffer the entire response on the server.</strong> If you have partial content (e.g. page header), then flush it as early as possible to get the browser working on your behalf.</li>
<li><strong>Optimize the contents of the first bytes</strong> by including references to other critical assets as early as possible.</li>
</ul>
<h2>Measuring "out of the box" NGINX TLS TTFB</h2>
<p>With the theory of TTFB out of the way, let's now turn to the practical matter of picking and tuning the server to deliver the best results. One would hope that the default “out of the box” experience for most servers would do a good job… unfortunately, that is not the case. Let's take a closer look nginx:</p>
<ul>
<li>Fresh Ubuntu server in ec2-west (micro instance) with nginx v1.4.4 (stable).</li>
<li>The server is configured to serve a single 20KB (compressed) file.</li>
<li>The TLS certificate is ~5KB and is using a 2048-bit key.</li>
<li>The measurements are done with WebPageTest: 3G profile (300ms delay), Chrome (stable channel), Dulles location (~80ms actual RTT to the EC2 instance on the west coast).</li>
</ul>
<p>The total client to server roundtrip time is ~380ms. As a result, we would expect a regular HTTP connection to yield a TTFB of ~1140ms: 380ms for DNS, 380ms for TCP handshake, and 380ms for the HTTP request and (instant) response. For HTTPS, we would add another two RTTs to negotiate all the required parameters: 1140ms + 760ms, or ~1900ms (5 RTTs) in total. Well, that's the theory, let's now try the theory in practice!</p>
<p><img src='http://1-ps.googleusercontent.com/h/www.igvita.com/posts/13/xnginx-oob.png.pagespeed.ic.CgkDAO20wm.png' class=center style='max-width:760px;width:100%;'/></p>
<p><strong>The HTTP TTFB is right on the mark (<a href="http://www.webpagetest.org/result/131210_AD_d59559928b917a897a946c865403e80f/1/details/">~1100ms</a>), but what in the world is going on with HTTPS?</strong> The TTFB reported by WebPageTest shows <a href="http://www.webpagetest.org/result/131210_PP_0889f2fc748958b9f1a931b3eab1f34c/1/details/">~2900ms</a>, which is an entire extra second over our expected value! Is it the cost of the RSA handshake and symmetric crypto? Nope. Running openssl benchmarks <a href="https://gist.github.com/igrigorik/7976678">on the server</a> shows that it takes ~2.5ms for a 2048-bit handshake, and we can stream ~100MB/s through aes-256. It's time to dig deeper.</p>
<h2>Fixing the “large” certificate bug in nginx</h2>
<p>Looking at the <a href="http://cloudshark.org/captures/48955af54fe8?filter=tcp.stream%3D%3D2">tcpdump of our HTTPS session</a> we see the <code>ClientHello</code> record followed by <code>ServerHello</code> response ~380ms later. So far so good, but then something peculiar happens: <strong>the server sends ~4KB of its certificate and pauses to wait for an ACK from the client - huh?</strong> The server is using a recent Linux kernel (3.11) and is configured by default with IW10, which allows it to send up to 10KB, what's going on?</p>
<p><img src='http://1-ps.googleusercontent.com/h/www.igvita.com/posts/13/xcert-latency.png.pagespeed.ic.3S6o1gpTbc.jpg' class=center style='max-width:760px;width:100%;'/></p>
<p>After digging through the nginx source code, one stumbles <a href="https://github.com/nginx/nginx/commit/e52bddaaa90e64b2291f6e58ef1a2cff71604f6a#diff-0584d16332cf0d6dd9adb990a3c76a0cR539">onto this gem</a>. Turns out, any nginx version prior to 1.5.6 has this issue: <strong>certificates over 4KB in size incur an extra roundtrip, turning a two roundtrip handshake into a three roundtrip affair - yikes.</strong> Worse, in this particular case we trigger another unfortunate edge case in Windows TCP stack: the client ACKs the first few packets from the server, but then waits ~200ms before it triggers a delayed ACK for the last segment. In total, that results in extra 580ms of latency that we did not expect.</p>
<p>Ok, let's try the current mainline nginx release (1.5.7) and see if we fare any better...</p>
<p><img src='http://1-ps.googleusercontent.com/h/www.igvita.com/posts/13/xnginx-mainline.png.pagespeed.ic.pI8_EYG6Kh.png' class=center style='max-width:760px;width:100%;'/></p>
<p>Much better! After a simple upgrade the TLS TTFB is down to <a href="http://www.webpagetest.org/result/131210_AR_46f1678346fb22b7463cff5d304147a3/1/details/">~2300ms</a>, which is about 600ms lower than our first attempt: <strong>we've just eliminated the extra RTT incurred by nginx and the ~200ms delayed ACK on the client.</strong> That said, we are not out of the woods yet &mdash; there is still an extra RTT in there.</p>
<h2>Optimizing the TLS record size</h2>
<p><a href="http://www.igvita.com/2013/10/24/optimizing-tls-record-size-and-buffering-latency/">TLS record size can have a significant impact</a> on the page load time performance of your application. In this case, we run into this issue head first: nginx pumps data to the TLS layer, which in turn creates a 16KB record and then passes it to the TCP stack. So far so good, except that <strong>the server congestion window is less than 16KB for our new connection and we overflow the window, incurring an extra roundtrip while the data is buffered on the client.</strong> Fixing this requires making a quick patch to the nginx source:</p>
<div class=highlight><pre><code class=bash>diff nginx-1.5.7/src/event/ngx_event_openssl.c nginx-1.5.7-mtu/src/event/ngx_event_openssl.c
570c570
&lt;               <span class=o>(</span>void<span class=o>)</span> BIO_set_write_buffer_size<span class=o>(</span>wbio, NGX_SSL_BUFSIZE<span class=o>)</span>;
---
&gt;               <span class=o>(</span>void<span class=o>)</span> BIO_set_write_buffer_size<span class=o>(</span>wbio, 16384<span class=o>)</span>;
diff nginx-1.5.7/src/event/ngx_event_openssl.h nginx-1.5.7-mtu/src/event/ngx_event_openssl.h
107c107
&lt; <span class=c>#define NGX_SSL_BUFSIZE  16384</span>
---
&gt; <span class=c>#define NGX_SSL_BUFSIZE  1400</span>
</code></pre></div>
<p><img src='http://1-ps.googleusercontent.com/h/www.igvita.com/posts/13/xnginx-mtu.png.pagespeed.ic.blnPccznkR.png' class=center style='max-width:760px;width:100%;'/></p>
<p><strong>After applying our two-line change and rebuilding the server our TTFB is down to <a href="http://www.webpagetest.org/result/131210_6N_9526d04a0ce33097806a2e5e6ba9f0fa/7/details/">~1900ms</a> &mdash; that's the 5 RTTs we expected at the start.</strong> In fact, it's easy to spot the difference from our previous run: the waterfall now shows the second RTT as content download time (blue section), whereas previously the browser couldn't process the HTML document until the very end. Success! But wait, what if I told you that we could do even better?</p>
<h2>Enabling TLS False Start</h2>
<p><strong><a href="http://tools.ietf.org/html/draft-bmoeller-tls-falsestart-00">TLS False Start</a> allows us to eliminate an extra roundtrip of latency within the <a href="http://chimera.labs.oreilly.com/books/1230000000545/ch04.html#TLS_HANDSHAKE">TLS handshake</a>:</strong> the client can send its encrypted application data (i.e. HTTP request) immediately after it has sent its <code>ChangeCipherSpec</code> and <code>Finished</code> records, without waiting for the server to confirm its settings. So, how do we enable TLS False Start?</p>
<ul>
<li>Chrome will use TLS False Start if it detects that the server supports NPN negotiation &mdash; NPN is an independent feature, but the presence of NPN support is used to <a href="https://www.imperialviolet.org/2012/04/11/falsestart.html">guard against broken implementations</a>.</li>
<li>Firefox toggled TLS False Start support multiple times, but it will be <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=942729">(re)enabled in M28</a>, and will also require an NPN advertisement and support for forward secrecy.</li>
<li>IE10+ uses a <a href="http://blogs.msdn.com/b/ieinternals/archive/2012/08/01/internet-explorer-10-network-performance-improvements-first-available-pre-resolve-pre-connect-caching.aspx">combination of blacklist and a timeout</a> and doesn't require any additional TLS features.</li>
<li>Apple <a href="http://opensource.apple.com/source/Security/Security-55471/libsecurity_ssl/lib/SecureTransport.h">landed TLS False Start</a> support in OSX 10.9, which hopefully means that its coming to Safari.</li>
</ul>
<p>In short, we need to enable NPN on the server, which in practice means that we need to rebuild nginx against OpenSSL 1.0.1a or higher &mdash; nothing more, nothing less. Let's do just that and see what happens...</p>
<p><img src='http://1-ps.googleusercontent.com/h/www.igvita.com/posts/13/xtttfb-compare.png.pagespeed.ic.mTThxqCPJR.png' class=center style='max-width:760px;width:100%;'/></p>
<p>We started with a ~1800ms overhead for our TLS connection (nearly 5 extra RTTs); eliminated the extra certificate roundtrip after a nginx upgrade; cut another RTT by forcing a smaller record size; dropped an extra RTT from the TLS handshake thanks to TLS False Start. With all said and done, <strong>our TTTFB is down to ~1560ms, which is exactly one roundtrip higher than a regular HTTP connection.</strong> Now we're talking!</p>
<p>Yes, TLS does add latency and processing overhead. That said, TLS is an unoptimized frontier and we can mitigate many of its costs - it's worth it. Our quick exploration with nginx is a case in point, and most other TLS servers have all the same issues we've outlined above. Let's get this fixed. <strong>TLS is not slow, it's unoptimized.</strong></p>
</div>
<div class=content id=small-about>
<hr/>
<img src="http://1-ps.googleusercontent.com/h/www.igvita.com/images/xigrigorik-small.png.pagespeed.ic.jdldzhjrre.jpg" alt="Ilya Grigorik" width=55 height=55 />
<p>
<a href="/">Ilya Grigorik</a> is a web performance engineer and developer advocate on the Make The Web Fast team at Google, where he spends his days and nights on making the web fast and driving adoption of performance best practices.<br/><a href="https://twitter.com/igrigorik" class=twitter-follow-button data-show-count=true data-align=right>Follow @igrigorik</a>
</p>
<hr/>
</div>
<div class="content social">
<span class=comments>
<img src="http://1-ps.googleusercontent.com/h/www.igvita.com/images/comment-icon.gif.pagespeed.ce.zO6KYusWbK.gif" width=14 height=14>
<a href="http://www.igvita.com/2013/12/16/optimizing-nginx-tls-time-to-first-byte/#disqus_thread" onclick="return loadDisqus()">View Comments</a>
</span>
<span class=share>
<a href="https://twitter.com/share" class=twitter-share-button data-via=igrigorik data-related=igrigorik>Tweet</a>
</span>
<span class="share plusbutton">
<g:plusone size=medium annotation=inline width=120></g:plusone>
</span>
</div>
<div id=comments class=content>
<div id=disqus_thread></div>
</div>
</div>
<div id=meta>
<div class="group book">
<img class=book-cover src="http://1-ps.googleusercontent.com/h/www.igvita.com/posts/projects/xbook-cover.png.pagespeed.ic.of1BLzw7va.png" style=margin-top:-0.5em width=275 height=400 />
<h3 style="color: #fff">High-Performance Browser Networking (O'Reilly)</h3>
<p style=font-style:italic>What every web developer must know about networking in the browser: impact of latency and bandwidth, TCP, UDP, and SSL performance, performance optimization for mobile networks (latency, battery, and more). Plus, an under the hood look at performance of HTTP 1.1 and 2.0, WebSocket, WebRTC, DataChannel, and other application transports.</p>
<p style=padding-top:0.5em><a href="http://chimera.labs.oreilly.com/books/1230000000545?utm_source=igvita&amp;utm_medium=referral&amp;utm_campaign=igvita-footer" style="text-decoration:none;"><span class=button>Read Online (free)</span></a></p>
</div>
</div>
<script>var _onloadq=_onloadq||[];var disqus_url='http://www.igvita.com/2013/12/16/optimizing-nginx-tls-time-to-first-byte/';var disqus_shortname='igvita';var loadDisqus=function(){var dsq=document.createElement('script');dsq.type='text/javascript';dsq.async=true;dsq.src='//'+disqus_shortname+'.disqus.com/embed.js';(document.getElementsByTagName('head')[0]||document.getElementsByTagName('body')[0]).appendChild(dsq);return false;};_onloadq.push(function(){(function(){var s=document.createElement('script');s.async=true;s.type='text/javascript';s.src='//'+disqus_shortname+'.disqus.com/count.js';(document.getElementsByTagName('HEAD')[0]||document.getElementsByTagName('BODY')[0]).appendChild(s);})();});_onloadq.push(function(){window.twttr=(function(d,s,id){var t,js,fjs=d.getElementsByTagName(s)[0];if(d.getElementById(id))return;js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);return window.twttr||(t={_e:[],ready:function(f){t._e.push(f)}});}(document,"script","twitter-wjs"));function clickEventToAnalytics(intent_event){if(intent_event){_gaq.push(['_trackSocial','Twitter','intent: '+intent_event.region]);}};function intentToAnalytics(intent_event){if(intent_event){_gaq.push(['_setCustomVar',1,'Social','Sharer',1]);_gaq.push(['_trackSocial','Twitter',intent_event.type]);}};twttr.ready(function(twttr){twttr.events.bind('click',clickEventToAnalytics);twttr.events.bind('tweet',intentToAnalytics);twttr.events.bind('follow',intentToAnalytics);});});_onloadq.push(function(){if(screen.width>480){(function(){var po=document.createElement('script');po.type='text/javascript';po.async=true;po.src='https://apis.google.com/js/plusone.js';var s=document.getElementsByTagName('script')[0];s.parentNode.insertBefore(po,s);})();}});</script>
<footer>
<div id=copyright>
<div class=group>
<span>© 2005-2013 Ilya Grigorik</span>
<a href="/" class=about>about</a><a href="http://feeds.igvita.com/igvita" class="about rss" onClick="_gaq.push(['_setCustomVar', 1, 'Social','Subscriber', 1]);_gaq.push(['_trackSocial', 'Feedburner', 'RSS - footer']);">subscribe via rss</a>
</div>
</div>
</footer>
</div>
<script>var _gaq=_gaq||[];var _onloadq=_onloadq||[];function afterOnload(){_onloadq.forEach(function(fn){fn()})}
if(window.addEventListener)
window.addEventListener("load",afterOnload,false);else if(window.attachEvent)
window.attachEvent("onload",afterOnload);else window.onload=afterOnload;(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src='//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);})(window,document,'script','dataLayer','GTM-49CP');</script>
<noscript><iframe src="//www.googletagmanager.com/ns.html?id=GTM-49CP" height=0 width=0 style="display:none;visibility:hidden"></iframe></noscript>
<script pagespeed_no_defer="">(function(){var e=window,f=Math,g="round",h="performance",k="&rit_script=",r="&rit_link=",y="&rit_img=",z="&rit_css=",A="&nttfb=",B="&nfd=",C="&ndt=",D="&nct=",E="&nbt=",F="&mfd=",G="&attfb=",H="&afd=",I="&adt=",J="&act=",K="&abt=",L="";e.pagespeed=e.pagespeed||{};var M=e.pagespeed;
M.getResourceTimingData=function(){if(e[h]&&(e[h].getEntries||e[h].webkitGetEntries)){for(var s=0,t=0,l=0,u=0,m=0,v=0,n=0,w=0,p=0,x=0,q=0,c={},d=e[h].getEntries?e[h].getEntries():e[h].webkitGetEntries(),b=0;b<d.length;b++){var a=d[b].duration;0<a&&(s+=a,++l,t=f.max(t,a));a=d[b].connectEnd-d[b].connectStart;0<a&&(v+=a,++n);a=d[b].domainLookupEnd-d[b].domainLookupStart;0<a&&(u+=a,++m);a=d[b].initiatorType;c[a]?++c[a]:c[a]=1;a=d[b].requestStart-d[b].fetchStart;0<a&&(x+=a,++q);a=d[b].responseStart-d[b].requestStart;
0<a&&(w+=a,++p)}return H+(l?f[g](s/l):0)+B+l+F+f[g](t)+J+(n?f[g](v/n):0)+D+n+I+(m?f[g](u/m):0)+C+m+K+(q?f[g](x/q):0)+E+q+G+(p?f[g](w/p):0)+A+p+(c.css?z+c.css:L)+(c.link?r+c.link:L)+(c.script?k+c.script:L)+(c.img?y+c.img:L)}return L};M.getResourceTimingData=M.getResourceTimingData;})();
(function(){var c=encodeURIComponent,f=window,h="performance",k="unload:",l="on",m="load:",n="load",p="ets=",q="beforeunload",r="EventStart",s="?",t="=",u="&url=",v="&ttfb=",w="&req_start=",x="&ref=",y="&r",z="&nt=",A="&nrp=",B="&nav=",C="&ifr=1",D="&ifr=0",E="&htmlAt=",F="&fp=",G="&dwld=",H="&dom_c=",I="&dns=",J="&connect=",K="&ccul=",L="&ccrl=",M="&ccos=",N="&ccis=",O="&cces=",P="&b_csi=",Q="&",R="";f.pagespeed=f.pagespeed||{};var S=f.pagespeed,T=function(a,d,b,e){this.d=a;this.a=d;this.b=b;this.e=e};S.beaconUrl=R;
T.prototype.c=function(){var a=this.d,d=f.mod_pagespeed_start,b=Number(new Date)-d,a=a+(-1==a.indexOf(s)?s:Q),a=a+p+(this.a==n?m:k),a=a+b;if(this.a!=q||!f.mod_pagespeed_loaded){a+=y+this.a+t;if(f[h]){var b=f[h].timing,e=b.navigationStart,g=b.requestStart,a=a+(b[this.a+r]-e),a=a+(B+(b.fetchStart-e)),a=a+(I+(b.domainLookupEnd-b.domainLookupStart)),a=a+(J+(b.connectEnd-b.connectStart)),a=a+(w+(g-e)),a=a+(v+(b.responseStart-g)),a=a+(G+(b.responseEnd-b.responseStart)),a=a+(H+(b.domContentLoadedEventStart-
e));f[h].navigation&&(a+=z+f[h].navigation.type);e=-1;b.msFirstPaint?e=b.msFirstPaint:f.chrome&&f.chrome.loadTimes&&(e=Math.floor(1E3*f.chrome.loadTimes().firstPaintTime));e-=g;0<=e&&(a+=F+e)}else a+=b;S.getResourceTimingData&&f.parent==f&&(a+=S.getResourceTimingData());a+=f.parent!=f?C:D;this.a==n&&(f.mod_pagespeed_loaded=!0,(b=f.mod_pagespeed_num_resources_prefetched)&&(a+=A+b),(b=f.mod_pagespeed_prefetch_start)&&(a+=E+(d-b)));S.panelLoader&&(d=S.panelLoader.getCsiTimingsString(),d!=R&&(a+=P+d));
S.criticalCss&&(d=S.criticalCss,a+=N+d.total_critical_inlined_size+O+d.total_original_external_size+M+d.total_overhead_size+L+d.num_replaced_links+K+d.num_unreplaced_links);this.b!=R&&(a+=this.b);document.referrer&&(a+=x+c(document.referrer));a+=u+c(this.e);S.beaconUrl=a;(new Image).src=a}};S.f=function(a,d,b,e){var g=new T(a,d,b,e);f.addEventListener?f.addEventListener(d,function(){g.c()},!1):f.attachEvent(l+d,function(){g.c()})};S.addInstrumentationInit=S.f;})();

pagespeed.addInstrumentationInit('http://1-ps.googleusercontent.com/beacon?org=112_1_jt', 'load', '&id=1387224259288549', 'http://www.igvita.com/2013/12/16/optimizing-nginx-tls-time-to-first-byte/');</script></body>
</html>
